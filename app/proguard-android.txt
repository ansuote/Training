# This is a configuration file for ProGuard.
# http:#proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.
# 上面三行注释可以看出 Gradle 2.2 之后使用的是内置的规则文件
-dontusemixedcaseclassnames     # 混淆时不使用大小写混写的类名
-dontskipnonpubliclibraryclasses    # 不跳过 libraray 中的非 public 类
-verbose    # 打印处理过程的信息
# Optimization is turned off by default. Dex does not like code run
# through the ProGuard optimize and preverify steps (and performs some
# of these optimizations on its own).
-dontoptimize   # 关闭优化功能，因为优化可能会造成一些潜在的风险，无法保证在所有版本的 Dalvik 都正常运行
-dontpreverify  # 关闭预校验功能，Android 平台上不需要，所以默认是关闭的
# Note that if you want to enable optimization, you cannot just
# include optimization flags in your own project configuration file;
# instead you will need to point to the
# "proguard-android-optimize.txt" file instead of this one from your
# project.properties file.
# Preserve some attributes that may be required for reflection.
-keepattributes *Annotation*,Signature,InnerClasses,EnclosingMethod     # 保留注解属性、泛型、内部类、封闭方法，后面都是三个属性都是为了反射正常运行
-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService
# For native methods, see http:#proguard.sourceforge.net/manual/examples.html#native
-keepclasseswithmembernames class * {
    native <methods>;
}
# 不混淆 native 方法名和包含 native 方法的类名，如果 native 方法未使用，还是会被移除
# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}
# 保留继承自 View 的 setXx() 和 getXx() 方法，因为属性动画会用到相应的 setter 和 getter
# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}
# 保留 Activity 中参数是 View 的方法，因为在 XML 中配置 android:onClick="buttonClick" 属性时，点击该按钮时就会调用 Activity 中的 buttonClick(View view) 方法
# For enumeration classes, see http:#proguard.sourceforge.net/manual/examples.html#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}
# 保留 enum 中的静态 values() 和 valueOf 方法，因为这些静态方法可能会在运行时通过内省调用
-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}
# 保留 Parcelable 子类中的 CREATOR 字段
-keepclassmembers class **.R$* {
    public static <fields>;
}
# 保留 R 文件中的所有静态字段，这些静态字段是用来记录资源 ID 的
# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}
# 保留 JavascriptInterface 注解标记的方法，不然 js 调用时就会找不到方法
# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontwarn android.support.**
# 不对 android.support 包下的代码警告，因为 support 包中一些代码是高版本才能使用，但是在低版本中有兼容性判断，是安全，所以在低版本打包时也不要警告
# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep     # 保留 Keep 注解
# 接下来的规则都是保留 Keep 注解标记的类型
-keep @android.support.annotation.Keep class * {*;}   # 标记类时，保留类及其所有成员
-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}
# 标记方法时，保留标注的方法和包含它的类名
-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}
# 标记字段时，保留标记的字段和包含它的类名
-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}
# 标记构造函数时，保留标记的构造函数和包含它的类名