apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'
// 依赖插件脚本
if (isTinkerEnable.toBoolean()) {
    apply from: 'tinker/tinker-support.gradle'
}
apply from: 'multiple-channel.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    //force-jumbo mode (when enabled it allows a larger number of strings in the dex files)
    dexOptions {
        jumboMode = true
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.lkl.ansuote.traning"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.2.14"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a'//, 'x86_64', 'arm64-v8a'
        }

        signingConfigs {
            release {
                try {
                    def signingFile = file("../signing.properties")
                    if (signingFile.canRead()) {
                        Properties properties = new Properties()
                        properties.load(new FileInputStream(signingFile))

                        storeFile file(properties['STORE_FILE'])
                        storePassword properties['STORE_PASSWORD']
                        keyAlias properties['KEY_ALIAS']
                        keyPassword properties['KEY_PASSWORD']
                    } else {
                        println "RELEASE_BUILD: signing.properties not found"
                    }
                } catch (e) {
                    throw new InvalidUserDataException("You should define STORE_FILE and STORE_PASSWORD and KEY_ALIAS and KEY_PASSWORD in signing.properties.")
                }
            }

        }
    }
    buildTypes {
        debug {
            //测试／正式统一一个签名
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false

            //tinker分包规则，注意此处必须在次声明。因为 tinkerSupport = false 的时候，不会引入分包规则，如果不同dex,会导致5.0及其找不到tinker类
            multiDexKeepProguard file("tinker/tinker_multidexkeep.pro")
            multiDexKeepFile file('multidex-config.txt')
        }

        release {
            //测试／正式统一一个签名
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            //混淆规则，注意此处必须加入 tinker_proguard.pro，防止 tinkerSupport = false 的时候，不引入的情况。
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles 'proguard-android.txt', 'proguard-rules.pro','tinker/tinker_proguard.pro'

            //tinker分包规则，注意此处必须在次声明。因为 tinkerSupport = false 的时候，不会引入分包规则，如果不同dex,会导致5.0及其找不到tinker类
            multiDexKeepProguard file("tinker/tinker_multidexkeep.pro")
            multiDexKeepFile file('multidex-config.txt')
        }
    }
//  lintOptions {
//        abortOnError false
//  }

    //指定 so 位置
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(":hdqlibrary")
    implementation project(":modulemodel")
    implementation project(":modulebussiness")

    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:multidex:1.0.1'

    implementation "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"    // kapt 代替 annotationProcessor
    compileOnly "org.glassfish:javax.annotation:$rootProject.javaxVersion"  //仅在编译的时候使用，打包的时候不引入

    //arouter
    implementation "com.alibaba:arouter-api:$rootProject.arouterApiVersion"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.arouterCompilerVersion"

    implementation project(":module")

    implementation "com.github.huangyanbin:SmartTable:$rootProject.smartTableVersion"

    // bugly
    implementation "com.tencent.bugly:crashreport_upgrade:$rootProject.buglyVersion"
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation "com.tencent.tinker:tinker-android-lib:$rootProject.tinkerVersion"
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    implementation "com.tencent.bugly:nativecrashreport:$rootProject.buglyNativeVersion"

    //walle
    implementation "com.meituan.android.walle:library:$rootProject.walleVersion"

}
repositories {
    mavenCentral()
}
